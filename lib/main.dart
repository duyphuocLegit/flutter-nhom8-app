import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:nhom10/theme/app_theme.dart';
import 'package:nhom10/services/theme_service.dart';
import 'package:nhom10/services/saved_accounts_service.dart';
import 'package:nhom10/services/task_notification_manager.dart';
import 'package:nhom10/config/android14_config.dart';
import 'package:nhom10/utils/responsive_utils.dart';
import 'screens/authentication.dart';
import 'screens/home.dart';
import 'firebase_options.dart'; // Generated by flutterfire configure
import 'screens/verify_email.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Configure Android 14 edge-to-edge display
  Android14Config.configureEdgeToEdge();

  // Initialize timezone database
  tz.initializeTimeZones();

  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Initialize services
  await SavedAccountsService.init();

  // Initialize notification manager (continue even if it fails)
  try {
    await TaskNotificationManager.initialize();
  } catch (e) {
    debugPrint(
      'Failed to initialize notifications, continuing without them: $e',
    );
  }

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [ChangeNotifierProvider(create: (_) => ThemeService())],
      child: Consumer<ThemeService>(
        builder: (context, themeService, child) {
          return MaterialApp(
            key: ValueKey(themeService.themeMode.name),
            title: 'TaskApp',
            theme: AppTheme.luxeLightTheme,
            darkTheme: AppTheme.luxeDarkTheme,
            themeMode: themeService.themeMode,
            // Ensure crisp text rendering
            debugShowMaterialGrid: false,
            builder: (context, child) {
              // Set system UI overlay style based on theme and screen size
              final isDarkMode =
                  themeService.themeMode == ThemeMode.dark ||
                  (themeService.themeMode == ThemeMode.system &&
                      MediaQuery.of(context).platformBrightness ==
                          Brightness.dark);
              final isSmallScreen = ResponsiveUtils.isVerySmallScreen(context);

              SystemChrome.setSystemUIOverlayStyle(
                Android14Config.getSystemUIOverlayStyle(
                  isDarkMode: isDarkMode,
                  isSmallScreen: isSmallScreen,
                ),
              );

              // Fix text scaling to prevent blurry text
              final optimizedTextScale = Android14Config.getOptimizedFontScale(
                context,
              );

              return MediaQuery(
                data: MediaQuery.of(
                  context,
                ).copyWith(textScaler: TextScaler.linear(optimizedTextScale)),
                child: child!,
              );
            },
            // home: StreamBuilder<User?>(
            //   stream: FirebaseAuth.instance.authStateChanges(),
            //   builder: (context, snapshot) {
            //     if (snapshot.connectionState == ConnectionState.waiting) {
            //       return const Scaffold(
            //         body: Center(child: CircularProgressIndicator()),
            //       );
            //     }

            //     if (snapshot.hasData) {
            //       return const MyHomePage();
            //     } else {
            //       return const AuthScreen();
            //     }
            //   },
            // ),
            home: StreamBuilder<User?>(
              stream: FirebaseAuth.instance.authStateChanges(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Scaffold(body: Center(child: CircularProgressIndicator()));
                }
                final user = snapshot.data;
                if (user == null) return const AuthScreen();

                // Có user -> chỉ vào Home khi đã verify mail
                if (user.emailVerified) {
                  return const MyHomePage();
                } else {
                  return VerifyEmailScreen(email: user.email ?? '');
                }
              },
            ),
            debugShowCheckedModeBanner: false,
          );
        },
      ),
    );
  }
}
